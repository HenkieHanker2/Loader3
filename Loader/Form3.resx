<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>